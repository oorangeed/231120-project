+ 암호화 방식
비밀번호를 DB에 저장할 때 Hash를 이용했는데, Hash는 단방향 암호화와 양방향 암호화 중 어떤 암호화 방식에 해당할까요?
비밀번호를 그냥 저장하지 않고 Hash 한 값을 저장 했을 때의 좋은 점은 무엇인가요?

: 해시함수는 일반적으로 단방향 암호화에 해당된다. 복호화가 불가능 하기 때문에 비밀번호 저장 등에 사용된다.
  hash값을 저장했을 때 모든 사용자에게 고유한 값을 부여 할 수 있고, 사용자의 비밀번호가 유출되더라도 db에는
  암호화된 값이 저장되므로 정보를 보호할 수 있다.  



+ 인증 방식
JWT(Json Web Token)을 이용해 인증 기능을 했는데, 만약 Access Token이 노출되었을 경우 발생할 수 있는 문제점은 무엇일까요?
해당 문제점을 보완하기 위한 방법으로는 어떤 것이 있을까요?

: 다른 사람이 노출된 토큰으로 사용자권한으로 엑세스 할 수 있다. 엑세스 토근을 안전하게 저장/전송해야 한다.
  HTTPS를 적용해 암호화된 연결을 사용한다.



+ 인증과 인가
1. 인증(Authentication)
: 유저의 아이디/패스워드(신원)을 확인하는 절차
    - 회원가입한 아이디 비밀번호를 DB에 저장.(비밀번호 암호화)
    - 로그인 시 해당 정보가 일치하면 Access Token 전송

2. 인가(Authorization)
: 로그인 한 유저가 그 요청을 할 수 있는 권한이 있는지 확인하는 절차
    - 서버에서 클라이언트가 받은 Token으로 권한을 확인



+ 개발환경
1. nodemon은 어떤 역할을 하는 패키지이며, 사용했을 때 어떤 점이 달라졌나요?
: 코드를 변경 할 때 마다 자동으로 서버를 재시작해 주는 확장 모듈이다.
  실제로 코드를 바꾸고 나서 작동하는지 확인 할 때 서버 재시작을 안해서 시간 버리는 경우가 더러 있었는데
  nodemon을 실행하면 자동으로 서버가 재시작 되어 수정된 부분을 서버에서 바로 확인 할 수 있었다.

2. npm을 이용해서 패키지를 설치하는 방법은 크게 일반, 글로벌(--global, -g), 개발용(--save-dev, -D)으로 3가지가 있습니다.
   각각의 차이점을 설명하고, nodemon은 어떤 옵션으로 설치해야 될까요?
    - 일반 : 'dependency'에 설치된다. 프로젝트에 직접 사용되는 기능 설치 할 때 사용한다.
    - 글로벌 : 시스템 전역에 설치된다. 컴퓨터 전체에서 사용이 가능하다.
    - 개발 : 'devDependencies'에 설치된다. 실제 코드에 포함되지 않고 개발 단계에만 사용된다.

    nodemon은 개발할 때 번거로움을 줄이기 위해 사용되는 기능으로, 개발용으로 설치해야한다.


